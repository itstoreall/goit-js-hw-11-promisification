{"version":3,"sources":["webpack:///./js/delay.js","webpack:///./js/toggle.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table"],"mappings":"iJAYMA,EAAQ,SAAAC,GAOX,OANgB,IAAIC,SAAQ,SAACC,GAC1BC,YAAW,WACRD,EAAQF,KACRA,OAMHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCChBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/D,OAAO,IAAIhB,SAAQ,SAACC,GAClBA,EAAQa,OAINX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,G","file":"main.bd4e31b307fef3dcd0c1.js","sourcesContent":["/**\n * \n * Задание 1\n * \n * Напиши функцию delay(ms), которая возвращает \n * промис, переходящий в состояние \"resolved\" \n * через ms миллисекунд. Значением исполнившегося \n * промиса должно быть то кол-во миллисекунд которое \n * передали во время вызова функции delay\n * \n */\n\nconst delay = ms => {\n   const promise = new Promise((resolve) => {\n      setTimeout(() => {\n         resolve(ms);\n      }, ms);\n   });\n\n   return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","/**\n * \n * Задание 2\n *\n * Перепиши функцию toggleUserState() так, \n * чтобы она не использовала callback-функцию \n * callback, а принимала всего два параметра \n * allUsers и userName и возвращала промис\n * \n */\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  return new Promise((resolve) => {\n    resolve(updatedUsers)\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);"],"sourceRoot":""}